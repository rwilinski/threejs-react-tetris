{"version":3,"sources":["game/constants.ts","components/Grid.tsx","game/utils.ts","game/blocks.ts","components/CellRounded.tsx","components/BlockPreview.tsx","game/store.ts","components/RenderText.tsx","components/Hud.tsx","contexts/CameraShakeContext.tsx","contexts/RenderBillboard.tsx","components/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BOARD_WIDTH","BOARD_HEIGHT","BOX_SIZE","GRID_WIDTH","GRID_HEIGHT","ACTIVE_CELL_SUFFIX","FONT","process","COLORS","BACKGROUND","TEXT","ALL_BLOCKS","id","color","maxWidth","paths","lineProps","lineWidth","Grid","Array","from","keys","map","index","Line","points","getRandomElement","arr","Math","floor","random","length","getRandomBlockAndCenter","boardWidth","block","randomBlock","randomRotation","path","defaultPath","rotationIndex","indexOf","getRandomBlock","xAxisOffset","yAxisOffset","reduce","prev","curr","Infinity","row","getColorById","find","item","startsWith","isCellActive","cell","String","endsWith","CellRoundedNoMemo","position","blockId","props","RoundedBox","args","radius","smoothness","p","roughness","metalness","CellRounded","memo","next","BlockPreview","useMemo","xCenterOffset","getBlockWidth","useStore","create","set","board","currentBlock","nextBlock","score","gameOver","gamePaused","restart","state","i","j","updateBoard","clearedRows","newBoard","forEach","rowIndex","filter","moveDown","setCurrentBlock","prepareForNext","replace","moveLeft","moveRight","toggleGamePause","setGameOver","RenderTextNoMemo","children","Text","fontSize","font","textAlign","RenderText","Hud","shallow","anchorX","anchorY","CameraShakeContext","createContext","CameraShakeProvider","useState","isShake","setShake","value","shake","duration","setTimeout","Provider","CameraShake","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","RenderBillboardContext","RenderBillboardProvider","text","setText","show","txt","hide","Billboard","material-color","follow","Game","cameraShake","useContext","billboard","gameInterval","setGameInterval","rotate","offsetLeft","offsetTop","newRotationIndex","newPath","rotateBlock","every","togglePause","useEventListener","key","useInterval","canMoveDown","canAddNewBlock","immediate","useEffect","cellIndex","App","cameraPosition","isFontLoaded","setFontLoaded","preloadFont","shadowMap","camera","fov","onCreated","gl","setClearColor","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31585fdd.chunk.js","sourcesContent":["import { Block } from \"./blocks\";\n\nexport const BOARD_WIDTH = 10;\nexport const BOARD_HEIGHT = 20;\n\nexport const BOX_SIZE = 10;\n\nexport const GRID_WIDTH = BOX_SIZE * BOARD_WIDTH;\nexport const GRID_HEIGHT = BOX_SIZE * BOARD_HEIGHT;\n\nexport const NORMAL_SPEED = 500;\nexport const FAST_SPEED = 40;\n\nexport const ACTIVE_CELL_SUFFIX = \"_active\";\n\nexport const FONT = `${process.env.PUBLIC_URL}/fonts/Raleway/static/Raleway-ExtraBold.ttf`;\n\nexport const COLORS = {\n  BACKGROUND: \"#eee\",\n  GRID: \"#787878\",\n  TEXT: \"#191919\",\n  BILLBOARD: {\n    BACKGROUND: \"#4a4e4d\",\n    TEXT: \"#fff\",\n  },\n};\n\n// https://strategywiki.org/wiki/Tetris/Rotation_systems\nexport const ALL_BLOCKS: Block[] = [\n  {\n    id: \"I\",\n    color: \"#ee5253\",\n    maxWidth: 4,\n    paths: [\n      [\n        [0, 1],\n        [1, 1],\n        [2, 1],\n        [3, 1],\n      ],\n      [\n        [2, 0],\n        [2, 1],\n        [2, 2],\n        [2, 3],\n      ],\n      [\n        [0, 2],\n        [1, 2],\n        [2, 2],\n        [3, 2],\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [1, 2],\n        [1, 3],\n      ],\n    ],\n  },\n  {\n    id: \"O\",\n    color: \"#2ecc71\",\n    maxWidth: 2,\n    paths: [\n      [\n        [0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1],\n      ],\n    ],\n  },\n  {\n    id: \"Z\",\n    color: \"#2e86de\",\n    maxWidth: 3,\n    paths: [\n      [\n        [0, 0],\n        [1, 0],\n        [1, 1],\n        [2, 1],\n      ],\n      [\n        [2, 0],\n        [1, 1],\n        [2, 1],\n        [1, 2],\n      ],\n      [\n        [0, 1],\n        [1, 1],\n        [1, 2],\n        [2, 2],\n      ],\n      [\n        [1, 0],\n        [0, 1],\n        [1, 1],\n        [0, 2],\n      ],\n    ],\n  },\n  {\n    id: \"S\",\n    color: \"#f1c40f\",\n    maxWidth: 3,\n    paths: [\n      [\n        [1, 0],\n        [2, 0],\n        [0, 1],\n        [1, 1],\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [2, 1],\n        [2, 2],\n      ],\n      [\n        [1, 1],\n        [2, 1],\n        [0, 2],\n        [1, 2],\n      ],\n      [\n        [0, 0],\n        [0, 1],\n        [1, 1],\n        [1, 2],\n      ],\n    ],\n  },\n  {\n    id: \"J\",\n    color: \"#9b59b6\",\n    maxWidth: 3,\n    paths: [\n      [\n        [0, 0],\n        [0, 1],\n        [1, 1],\n        [2, 1],\n      ],\n      [\n        [1, 0],\n        [2, 0],\n        [1, 1],\n        [1, 2],\n      ],\n      [\n        [0, 1],\n        [1, 1],\n        [2, 1],\n        [2, 2],\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [0, 2],\n        [1, 2],\n      ],\n    ],\n  },\n  {\n    id: \"L\",\n    color: \"#0abde3\",\n    maxWidth: 3,\n    paths: [\n      [\n        [0, 1],\n        [1, 1],\n        [2, 1],\n        [2, 0],\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [1, 2],\n        [2, 2],\n      ],\n      [\n        [0, 1],\n        [1, 1],\n        [2, 1],\n        [0, 2],\n      ],\n      [\n        [0, 0],\n        [1, 0],\n        [1, 1],\n        [1, 2],\n      ],\n    ],\n  },\n  {\n    id: \"T\",\n    color: \"#fd79a8\",\n    maxWidth: 3,\n    paths: [\n      [\n        [1, 0],\n        [0, 1],\n        [1, 1],\n        [2, 1],\n      ],\n      [\n        [1, 0],\n        [1, 1],\n        [1, 2],\n        [2, 1],\n      ],\n      [\n        [0, 1],\n        [1, 1],\n        [2, 1],\n        [1, 2],\n      ],\n      [\n        [1, 0],\n        [0, 1],\n        [1, 1],\n        [1, 2],\n      ],\n    ],\n  },\n];\n","import { Line } from \"@react-three/drei\";\n\nimport {\n  BOARD_WIDTH,\n  BOARD_HEIGHT,\n  GRID_WIDTH,\n  GRID_HEIGHT,\n  BOX_SIZE,\n  COLORS,\n} from \"../game/constants\";\n\nconst lineProps = {\n  color: COLORS.GRID,\n  lineWidth: 0.5,\n};\n\nexport function Grid() {\n  return (\n    <>\n      {Array.from(Array(BOARD_HEIGHT + 1).keys()).map((index) => (\n        // @ts-ignore\n        <Line\n          key={`grid-horizontal-line-${index}`}\n          points={[\n            [0, index * BOX_SIZE, 0],\n            [GRID_WIDTH, index * BOX_SIZE, 0],\n          ]}\n          {...lineProps}\n        />\n      ))}\n\n      {Array.from(Array(BOARD_WIDTH + 1).keys()).map((index) => (\n        // @ts-ignore\n        <Line\n          key={`grid-vertical-line-${index}`}\n          points={[\n            [index * BOX_SIZE, 0, 0],\n            [index * BOX_SIZE, GRID_HEIGHT, 0],\n          ]}\n          {...lineProps}\n        />\n      ))}\n    </>\n  );\n}\n","export function getRandomElement<T = unknown>(arr: T[]): T {\n  const randomIndex = Math.floor(Math.random() * arr.length);\n\n  return arr[randomIndex];\n}\n","import { ALL_BLOCKS, ACTIVE_CELL_SUFFIX, BOARD_WIDTH } from \"./constants\";\nimport { getRandomElement } from \"./utils\";\n\ntype BlockPathDimention = [x: number, y: number];\n\nexport type Block = {\n  id: string;\n  color: string;\n  maxWidth: number;\n  paths: BlockPathDimention[][];\n};\n\nexport type BlockMetadata = Block & {\n  rotationIndex: number;\n  path: BlockPathDimention[];\n  defaultPath: BlockPathDimention[];\n};\n\nexport function getRandomBlock(): BlockMetadata {\n  const randomBlock = getRandomElement(ALL_BLOCKS);\n  const randomRotation = getRandomElement(randomBlock.paths);\n\n  return {\n    ...randomBlock,\n    path: randomRotation,\n    defaultPath: randomRotation,\n    rotationIndex: randomBlock.paths.indexOf(randomRotation),\n  };\n}\n\nexport function getRandomBlockAndCenter(boardWidth: typeof BOARD_WIDTH) {\n  const block = getRandomBlock();\n  const xAxisOffset = Math.floor((boardWidth - block.maxWidth) / 2);\n  const yAxisOffset = block.path.reduce(\n    (prev, curr) => (curr[1] < prev ? curr[1] : prev),\n    Infinity\n  );\n\n  block.path = block.path.map((row) => [\n    row[0] + xAxisOffset,\n    row[1] - yAxisOffset,\n  ]);\n\n  return block;\n}\n\nexport function rotateBlock(block: BlockMetadata) {\n  let newRotationIndex = block.rotationIndex + 1;\n  let newPath = block.paths[newRotationIndex];\n\n  if (!newPath) {\n    newRotationIndex = 0;\n    newPath = block.paths[0];\n  }\n\n  return {\n    ...block,\n    path: newPath,\n    defaultPath: newPath,\n    rotationIndex: newRotationIndex,\n  };\n}\n\nexport function getBlockWidth(path: BlockPathDimention[], absolute = false) {\n  // asbolute - count from 0; include left offset\n  const xAxisOffset = absolute\n    ? 0\n    : path.reduce((prev, curr) => (curr[0] < prev ? curr[0] : prev), Infinity);\n\n  const maxX = path.reduce(\n    (prev, curr) => (curr[0] > prev ? curr[0] : prev),\n    0\n  );\n\n  return maxX - xAxisOffset + 1;\n}\n\nexport function getColorById(id: Block[\"id\"]) {\n  return ALL_BLOCKS.find((item) => item.id === id || id.startsWith(item.id))\n    ?.color;\n}\n\nexport function isCellActive(cell: string) {\n  return String(cell).endsWith(ACTIVE_CELL_SUFFIX);\n}\n","import { memo } from \"react\";\nimport { RoundedBox } from \"@react-three/drei\";\n\nimport { BOX_SIZE } from \"../game/constants\";\nimport { Block, getColorById } from \"../game/blocks\";\n\ntype CellRoundedType = {\n  position: [number, number, number];\n  blockId: Block[\"id\"];\n};\n\nfunction CellRoundedNoMemo({\n  position = [0, 0, 0],\n  blockId,\n  ...props\n}: CellRoundedType) {\n  return (\n    // @ts-ignore\n    <RoundedBox\n      args={[BOX_SIZE, BOX_SIZE, BOX_SIZE]}\n      radius={0.8}\n      smoothness={1}\n      position={position.map((p) => p + BOX_SIZE / 2)}\n      {...props}\n    >\n      <meshStandardMaterial\n        color={getColorById(blockId)}\n        roughness={0.75}\n        metalness={0.5}\n      />\n    </RoundedBox>\n  );\n}\n\nexport const CellRounded = memo(CellRoundedNoMemo, (prev, next) => {\n  return (\n    prev.position[0] === next.position[0] &&\n    prev.position[1] === next.position[1] &&\n    prev.position[2] === next.position[2] &&\n    prev.blockId === next.blockId\n  );\n});\n","import { useMemo } from \"react\";\n\nimport { CellRounded } from \"./CellRounded\";\nimport { BlockMetadata, getBlockWidth } from \"../game/blocks\";\nimport { BOX_SIZE } from \"../game/constants\";\n\ntype BlockPreviewProps = {\n  block: BlockMetadata;\n};\n\nexport function BlockPreview({ block }: BlockPreviewProps) {\n  // X offset to remove\n  const xAxisOffset = useMemo(\n    () =>\n      block.defaultPath.reduce(\n        (prev, curr) => (curr[0] < prev ? curr[0] : prev),\n        Infinity\n      ),\n    [block.defaultPath]\n  );\n\n  // Y offset to remove\n  const yAxisOffset = useMemo(\n    () =>\n      block.defaultPath.reduce(\n        (prev, curr) => (curr[1] < prev ? curr[1] : prev),\n        Infinity\n      ),\n    [block.defaultPath]\n  );\n\n  // add X offset to center the block on the plane\n  const xCenterOffset = useMemo(() => {\n    const blockWidth = getBlockWidth(block.defaultPath);\n\n    return (4 - blockWidth) / 2;\n  }, [block.defaultPath]);\n\n  return (\n    <>\n      <group position={[-60, 125, 0]}>\n        {block.defaultPath\n          .map((row) => [row[0] - xAxisOffset, row[1] - yAxisOffset])\n          .map((row) => (\n            <CellRounded\n              key={`block-preview-cell-${row[0]}-${row[1]}`}\n              position={[\n                xCenterOffset * BOX_SIZE + row[0] * BOX_SIZE,\n                30 - row[1] * BOX_SIZE,\n                0,\n              ]}\n              blockId={block.id}\n            />\n          ))}\n      </group>\n    </>\n  );\n}\n","import create from \"zustand\";\n\nimport { ACTIVE_CELL_SUFFIX, BOARD_HEIGHT, BOARD_WIDTH } from \"./constants\";\nimport { BlockMetadata, getRandomBlockAndCenter, isCellActive } from \"./blocks\";\n\ntype Store = {\n  board: string[][];\n  currentBlock: BlockMetadata | null;\n  nextBlock: BlockMetadata | null;\n  score: number;\n  gameOver: boolean;\n  gamePaused: boolean;\n  // Actions:\n  restart: () => void;\n  updateBoard: () => number[];\n  moveDown: () => void;\n  setCurrentBlock: (block: BlockMetadata) => void;\n  prepareForNext: () => void;\n  moveLeft: () => void;\n  moveRight: () => void;\n  toggleGamePause: () => void;\n  setGameOver: () => void;\n};\n\nexport const useStore = create<Store>((set) => ({\n  board: [],\n  currentBlock: null,\n  nextBlock: null,\n  score: 0,\n  gameOver: true,\n  gamePaused: false,\n  // Actions:\n  restart: () =>\n    set((state) => {\n      const board: Store[\"board\"] = [];\n\n      for (let i = 0; i < BOARD_HEIGHT; i++) {\n        board[i] = [];\n\n        for (let j = 0; j < BOARD_WIDTH; j++) {\n          board[i][j] = \"\";\n        }\n      }\n\n      return {\n        ...state,\n        board,\n        gameOver: false,\n        score: 0,\n        currentBlock: getRandomBlockAndCenter(BOARD_WIDTH),\n        nextBlock: getRandomBlockAndCenter(BOARD_WIDTH),\n      };\n    }),\n  updateBoard: () => {\n    let clearedRows: number[] = [];\n\n    set((state) => {\n      // remove old active cells\n      const newBoard = state.board.map((row) =>\n        row.map((cell) => (isCellActive(cell) ? \"\" : cell))\n      );\n\n      // place a new position of block and add active\n      state.currentBlock?.path.forEach((item) => {\n        if (!newBoard[item[1]][item[0]]) {\n          newBoard[item[1]][item[0]] =\n            state.currentBlock!.id + ACTIVE_CELL_SUFFIX;\n        }\n      });\n\n      state.board.forEach((row, rowIndex) => {\n        const isFull =\n          row.filter((cell) => cell && !isCellActive(cell)).length ===\n          row.length;\n\n        if (isFull) {\n          clearedRows = [...clearedRows, rowIndex];\n\n          for (let i = rowIndex; i > 0; i--) {\n            for (let j = 0; j < BOARD_WIDTH; j++) {\n              if (\n                !isCellActive(newBoard[i][j]) &&\n                !isCellActive(newBoard[i - 1][j])\n              ) {\n                newBoard[i][j] = newBoard[i - 1][j];\n              }\n            }\n          }\n        }\n      });\n\n      return {\n        ...state,\n        board: newBoard,\n        score: state.score + clearedRows.length * clearedRows.length,\n      };\n    });\n\n    return clearedRows;\n  },\n  moveDown: () =>\n    set((state) => {\n      if (!state.currentBlock) {\n        return state;\n      }\n\n      return {\n        ...state,\n        currentBlock: {\n          ...state.currentBlock,\n          path: state.currentBlock.path.map((item) => [item[0], item[1] + 1]),\n        },\n      };\n    }),\n  setCurrentBlock: (block) =>\n    set((state) => ({ ...state, currentBlock: block })),\n  prepareForNext: () =>\n    set((state) => {\n      if (!state.currentBlock || !state.nextBlock) {\n        return state;\n      }\n\n      return {\n        ...state,\n        // swap blocks\n        currentBlock: { ...state.nextBlock },\n        // generate next block\n        nextBlock: getRandomBlockAndCenter(BOARD_WIDTH),\n        // remove active block from board\n        board: state.board.map((row) =>\n          row.map((cell) => cell.replace(ACTIVE_CELL_SUFFIX, \"\"))\n        ),\n      };\n    }),\n  moveLeft: () =>\n    set((state) => {\n      if (!state.currentBlock) {\n        return state;\n      }\n\n      return {\n        ...state,\n        currentBlock: {\n          ...state.currentBlock,\n          path: state.currentBlock.path.map((item) => [item[0] - 1, item[1]]),\n        },\n      };\n    }),\n  moveRight: () =>\n    set((state) => {\n      if (!state.currentBlock) {\n        return state;\n      }\n\n      return {\n        ...state,\n        currentBlock: {\n          ...state.currentBlock,\n          path: state.currentBlock.path.map((item) => [item[0] + 1, item[1]]),\n        },\n      };\n    }),\n  toggleGamePause: () =>\n    set((state) => ({\n      ...state,\n      gamePaused: !state.gamePaused,\n    })),\n  setGameOver: () => set((state) => ({ ...state, gameOver: true })),\n}));\n","import { Text } from \"@react-three/drei\";\nimport { memo } from \"react\";\n\nimport { COLORS, FONT } from \"../game/constants\";\n\nexport function RenderTextNoMemo({ children, ...props }: any) {\n  return (\n    <Text\n      color={COLORS.TEXT}\n      fontSize={18}\n      font={FONT}\n      textAlign=\"center\"\n      {...props}\n    >\n      {children}\n    </Text>\n  );\n}\n\nexport const RenderText = memo(RenderTextNoMemo, (prev, next) => {\n  return prev.children === next.children;\n});\n","import shallow from \"zustand/shallow\";\n\nimport { BlockPreview } from \"./BlockPreview\";\nimport { useStore } from \"../game/store\";\nimport { GRID_WIDTH, GRID_HEIGHT } from \"../game/constants\";\nimport { RenderText } from \"./RenderText\";\n\nexport function Hud() {\n  const { score, nextBlock } = useStore(\n    (state) => ({ score: state.score, nextBlock: state.nextBlock }),\n    shallow\n  );\n\n  return (\n    <>\n      <RenderText\n        position={[-20, GRID_HEIGHT, 0]}\n        anchorX=\"right\"\n        anchorY=\"top\"\n      >\n        NEXT\n      </RenderText>\n\n      <RenderText\n        position={[GRID_WIDTH + 20, GRID_HEIGHT, 0]}\n        anchorX=\"left\"\n        anchorY=\"top\"\n      >\n        SCORE\n      </RenderText>\n\n      <RenderText\n        position={[GRID_WIDTH + 50, GRID_HEIGHT - 30, 0]}\n        anchorY=\"top\"\n      >\n        {score}\n      </RenderText>\n\n      {nextBlock && <BlockPreview block={nextBlock} />}\n    </>\n  );\n}\n","import { createContext, ReactNode, useContext, useState } from \"react\";\nimport { CameraShake } from \"@react-three/drei\";\n\ntype CameraShakeContextType = {\n  shake: (duration?: number) => void;\n};\n\ntype CameraShakeProviderProps = {\n  children: ReactNode;\n};\n\nexport const CameraShakeContext = createContext<CameraShakeContextType>(\n  {} as CameraShakeContextType\n);\n\nexport const CameraShakeProvider = ({ children }: CameraShakeProviderProps) => {\n  const [isShake, setShake] = useState(false);\n\n  const value = {\n    shake: (duration = 200) => {\n      setShake(true);\n      setTimeout(() => setShake(false), duration);\n    },\n  };\n\n  return (\n    <CameraShakeContext.Provider value={value}>\n      {children}\n      <CameraShake\n        maxYaw={isShake ? 0.02 : 0}\n        maxPitch={isShake ? 0.02 : 0}\n        maxRoll={isShake ? 0.02 : 0}\n        yawFrequency={isShake ? 10 : 0}\n        pitchFrequency={isShake ? 10 : 0}\n        rollFrequency={isShake ? 10 : 0}\n      />\n    </CameraShakeContext.Provider>\n  );\n};\n\nexport const useCameraShake = () => {\n  return useContext(CameraShakeContext);\n};\n","import { createContext, ReactNode, useContext, useState } from \"react\";\nimport { Billboard, Text } from \"@react-three/drei\";\nimport { GRID_WIDTH, FONT, COLORS } from \"../game/constants\";\n\ntype RenderBillboardContextType = {\n  show: (text: string) => void;\n  hide: () => void;\n};\n\ntype RenderBillboardProviderProps = {\n  children: ReactNode;\n};\n\nexport const RenderBillboardContext = createContext<RenderBillboardContextType>(\n  {} as RenderBillboardContextType\n);\n\nexport const RenderBillboardProvider = ({\n  children,\n}: RenderBillboardProviderProps) => {\n  const [text, setText] = useState<string | null>(null);\n\n  const value = {\n    show: (txt: string) => setText(txt),\n    hide: () => setText(null),\n  };\n\n  return (\n    <RenderBillboardContext.Provider value={value}>\n      {children}\n      {text && (\n        // @ts-ignore\n        <Billboard\n          position={[GRID_WIDTH / 2, 100, 50]}\n          args={[100, 50]}\n          material-color={COLORS.BILLBOARD.BACKGROUND}\n          follow={true}\n        >\n          {/* @ts-ignore */}\n          <Text\n            position={[0, 0, 1]}\n            color={COLORS.BILLBOARD.TEXT}\n            fontSize={7}\n            maxWidth={90}\n            font={FONT}\n            anchorX=\"center\"\n            anchorY=\"middle\"\n            textAlign=\"center\"\n          >\n            {text}\n          </Text>\n        </Billboard>\n      )}\n    </RenderBillboardContext.Provider>\n  );\n};\n\nexport const useRenderBillboard = () => {\n  return useContext(RenderBillboardContext);\n};\n","import { useEffect, useState } from \"react\";\nimport { useEventListener, useInterval } from \"ahooks\";\n\nimport { CellRounded } from \"./CellRounded\";\nimport { useCameraShake } from \"../contexts/CameraShakeContext\";\nimport { useRenderBillboard } from \"../contexts/RenderBillboard\";\nimport { useStore } from \"../game/store\";\nimport { isCellActive, rotateBlock } from \"../game/blocks\";\nimport {\n  BOARD_HEIGHT,\n  BOARD_WIDTH,\n  BOX_SIZE,\n  FAST_SPEED,\n  NORMAL_SPEED,\n} from \"../game/constants\";\n\nexport function Game() {\n  const state = useStore();\n  const cameraShake = useCameraShake();\n  const billboard = useRenderBillboard();\n  const [gameInterval, setGameInterval] = useState<number | null>(null);\n\n  const startNewGame = () => {\n    setGameInterval(NORMAL_SPEED);\n\n    state.restart();\n    state.updateBoard();\n  };\n\n  const canAddNewBlock = () => {\n    return state.nextBlock?.path.every(\n      (item) => !state.board[item[1]][item[0]]\n    );\n  };\n\n  const canMoveDown = () => {\n    return state.currentBlock?.path.every((item) => {\n      if (item[1] + 1 >= BOARD_HEIGHT) {\n        return false;\n      }\n\n      const cell = state.board[item[1] + 1][item[0]];\n\n      return cell === \"\" || isCellActive(cell);\n    });\n  };\n\n  const rotate = () => {\n    const { path, defaultPath } = state.currentBlock!;\n    const offsetLeft = path[0][0] - defaultPath[0][0];\n    const offsetTop = path[0][1] - defaultPath[0][1];\n\n    const next = rotateBlock(state.currentBlock!);\n\n    next.path = next.path.map((item) => [\n      item[0] + offsetLeft,\n      item[1] + offsetTop,\n    ]);\n\n    const canRotate = next.path.every((item) => {\n      if (\n        item[0] < 0 ||\n        item[0] >= BOARD_WIDTH ||\n        item[1] < 0 ||\n        item[1] >= BOARD_HEIGHT\n      ) {\n        return false;\n      }\n\n      const cell = state.board[item[1]][item[0]];\n\n      return cell === \"\" || isCellActive(cell);\n    });\n\n    if (canRotate) {\n      state.setCurrentBlock(next);\n      state.updateBoard();\n    }\n  };\n\n  const moveLeft = () => {\n    const canMove = state.currentBlock?.path.every((item) => {\n      const cell = state.board[item[1]][item[0] - 1];\n\n      return cell === \"\" || isCellActive(cell);\n    });\n\n    if (canMove) {\n      state.moveLeft();\n      state.updateBoard();\n    }\n  };\n\n  const moveRight = () => {\n    const canMove = state.currentBlock?.path.every((item) => {\n      const cell = state.board[item[1]][item[0] + 1];\n\n      return cell === \"\" || isCellActive(cell);\n    });\n\n    if (canMove) {\n      state.moveRight();\n      state.updateBoard();\n    }\n  };\n\n  const togglePause = () => {\n    billboard.hide();\n\n    if (state.gameOver) {\n      startNewGame();\n\n      return;\n    }\n\n    setGameInterval(state.gamePaused ? NORMAL_SPEED : null);\n\n    // negation, because it's before state change\n    if (!state.gamePaused) {\n      billboard.show(\"Game paused\");\n    }\n\n    state.toggleGamePause();\n  };\n\n  useEventListener(\"keydown\", ({ key }) => {\n    switch (key) {\n      case \"ArrowUp\":\n        if (gameInterval) {\n          rotate();\n        }\n\n        break;\n\n      case \"ArrowLeft\":\n        if (gameInterval) {\n          moveLeft();\n        }\n\n        break;\n\n      case \"ArrowRight\":\n        if (gameInterval) {\n          moveRight();\n        }\n\n        break;\n\n      case \"ArrowDown\":\n        if (gameInterval) {\n          setGameInterval(FAST_SPEED);\n        }\n\n        break;\n\n      case \" \":\n      case \"Escape\":\n        togglePause();\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  useEventListener(\"keyup\", ({ key }) => {\n    if (key === \"ArrowDown\" && gameInterval) {\n      setGameInterval(NORMAL_SPEED);\n    }\n  });\n\n  useInterval(\n    () => {\n      if (!canMoveDown()) {\n        // check can add a new block to the top of the board\n        if (!canAddNewBlock()) {\n          state.setGameOver();\n\n          setGameInterval(null);\n\n          billboard.show(`GAME OVER\n\nYour score: ${state.score}\n\nPress space bar to restart.`);\n\n          return;\n        }\n\n        state.prepareForNext();\n      } else {\n        state.moveDown();\n      }\n\n      const clearedRows = state.updateBoard();\n\n      if (clearedRows.length) {\n        cameraShake.shake();\n      }\n    },\n    gameInterval,\n    { immediate: false }\n  );\n\n  useEffect(() => {\n    billboard.show(\"Press space bar to start\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      {state.board.map((row, rowIndex) => {\n        return row.map((cell, cellIndex) => {\n          if (!cell) {\n            return null;\n          }\n\n          return (\n            <CellRounded\n              key={`cell-${rowIndex}-${cellIndex}-${cell}`}\n              position={[\n                cellIndex * BOX_SIZE,\n                // three.js space starts from the bottom, from 0. Need to reverse\n                (BOARD_HEIGHT - 1) * BOX_SIZE - rowIndex * BOX_SIZE,\n                0,\n              ]}\n              blockId={cell}\n            />\n          );\n        });\n      })}\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\n// @ts-ignore\nimport { preloadFont } from \"troika-three-text\";\n\nimport { Grid } from \"./components/Grid\";\nimport { Hud } from \"./components/Hud\";\nimport { Game } from \"./components/Game\";\nimport { CameraShakeProvider } from \"./contexts/CameraShakeContext\";\nimport { RenderBillboardProvider } from \"./contexts/RenderBillboard\";\nimport { COLORS, FONT, GRID_HEIGHT, GRID_WIDTH } from \"./game/constants\";\n\nfunction App() {\n  const cameraPosition = [GRID_WIDTH / 2, GRID_HEIGHT / 2, 150]; // middle of the grid\n\n  const [isFontLoaded, setFontLoaded] = useState(false);\n\n  useEffect(() => {\n    preloadFont({ font: FONT }, () => setFontLoaded(true));\n  }, []);\n\n  return (\n    <Canvas\n      shadowMap\n      camera={{ fov: 75, position: cameraPosition }}\n      onCreated={({ gl }) => gl.setClearColor(COLORS.BACKGROUND)}\n    >\n      <CameraShakeProvider>\n        <RenderBillboardProvider>\n          <ambientLight intensity={0.4} />\n          <pointLight position={cameraPosition} intensity={1} />\n\n          {isFontLoaded && (\n            <>\n              <Grid />\n\n              <Hud />\n\n              <Game />\n            </>\n          )}\n        </RenderBillboardProvider>\n      </CameraShakeProvider>\n    </Canvas>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}